# -*- coding: utf-8 -*-
"""
Created on Mon Apr  5 11:42:25 2021

@author: JHagan

Plotting Data from CSV files of Data Extraction (from Brian's code).

"""

import matplotlib.pyplot as plt
import math
import pandas as pd
import os

# File Name
file_name = "JH_L01_2_15_2021_pH7_1MKCl_Azo_2_Cis_10uL_DNA"

# Path to file Name
path = "F:\\Research\\Data\\Azo_Switch_Data\\February17_2021\\Azo\\Event_Extraction\\combined" # 1\\Event_Extraction\\150_900_seconds\\threshold_0p986\\csv_files"

# Applied Voltage
appl_volt = 200 # mV

#%%

""" ---- Class and Function Section ----- """

class PlottingNanoporeData:
    # Header names added to file
    csv_file_headers = ["start_time", "end_time", "event_duration", "event_magnitude", "average_baseline_current", "I_Io"]
    
    # Folder labels for created folders
    folders_to_create = {"scatter_plots": "Plotted_Data"}
    
    # Variables for scatter plots
    scatter_variables = {"size": 15, "color": ["blue", "red"]}
    
    def __init__(self, file_path, data_file, applied_voltage = False):
        # Variables input by the user
        self.file_path = file_path
        self.data_file = data_file
        self.applied_voltage = applied_voltage
        
        # Lists generated by this class
        self.event_duration = []
        self.event_magnitude = []
        self.conductance_mag = []
        self.event_I_Io = []
        
    def extractValues(self):
        """ extractValues takes out the values from the
        datafile and adds it to the classes values lists. """
        # Opens data file in Pandas DataFrame
        data = pd.read_csv(os.path.join(self.file_path, self.data_file + ".csv"), header = None)
        
        # Adds column headers to the DataFrame
        data.columns = self.csv_file_headers
        
        # Extracts values and places these into the class
        self.event_duration.extend((datapoints * 1000) for datapoints in data["event_duration"])
        self.event_magnitude.append(data["event_magnitude"])
        self.event_I_Io.append(data["I_Io"])
        
        # Clears un-needed data
        data = []
        return(self.event_duration)
    
    def plotDurVsMag(self, xmin = None, xmax = None, ymin = None, ymax = None):
        
        # Plot a histogram of the normalized data
        fig, ax = plt.subplots(figsize = (9,9))
        
        plt.scatter(self.event_magnitude, self.event_duration, s = self.scatter_variables["size"], color = self.scatter_variables["color"][0])
        
        ax.set_xlabel("Event Magnitude (pA)", size = 30, fontname = "Arial")
        ax.set_ylabel("Event Duration (ms)", size = 30, fontname = "Arial")
        ax.set_xlim(xmin, xmax)
        ax.set_ylim(ymin, ymax)
        
        plt.xticks(fontsize = 30, fontname = 'Arial')
        plt.yticks(fontsize = 30, fontname = 'Arial')
        
        # Sets parametesr for plot formatting
        ax.spines['top'].set_visible(False) # Removes top and right lines of plot
        ax.spines['right'].set_visible(False)
        
        ax.spines['left'].set_linewidth(4) # Makes the boarder bold
        ax.xaxis.set_tick_params(width = 4, length = 5)
        ax.spines['bottom'].set_linewidth(4) # Makes the boarder bold
        ax.yaxis.set_tick_params(width = 4, length = 5)
        
        fig.tight_layout()
        
        # Making folder and saving plot
        try:
            os.mkdir(os.path.join(self.file_path, self.folders_to_create["scatter_plots"]))
        except:
            pass
        
        plt.savefig(os.path.join(self.file_path, self.folders_to_create["scatter_plots"], "Scatter_Dur_vs_Mag.png"), dpi = 600)
        
        plt.show()
        plt.close()
        
        
    def plotDurVsI_Io(self, xmin = None, xmax = None, ymin = None, ymax = None):
        # Plot a histogram of the normalized data
        fig, ax = plt.subplots(figsize = (9,9))
        
        plt.scatter(self.event_I_Io, self.event_duration, s = self.scatter_variables["size"], color = self.scatter_variables["color"][0])
        
        ax.set_xlabel("<i> / <io>", size = 30, fontname = "Arial")
        ax.set_ylabel("Event Duration (ms)", size = 30, fontname = "Arial")
        ax.set_xlim(xmin, xmax)
        ax.set_ylim(ymin, ymax)
        
        plt.xticks(fontsize = 30, fontname = 'Arial')
        plt.yticks(fontsize = 30, fontname = 'Arial')
        
        # Sets parametesr for plot formatting
        ax.spines['top'].set_visible(False) # Removes top and right lines of plot
        ax.spines['right'].set_visible(False)
        
        ax.spines['left'].set_linewidth(4) # Makes the boarder bold
        ax.xaxis.set_tick_params(width = 4, length = 5)
        ax.spines['bottom'].set_linewidth(4) # Makes the boarder bold
        ax.yaxis.set_tick_params(width = 4, length = 5)
        
        fig.tight_layout()
        
        # Making folder and saving plot
        try:
            os.mkdir(os.path.join(self.file_path, self.folders_to_create["scatter_plots"]))
        except:
            pass
        
        plt.savefig(os.path.join(self.file_path, self.folders_to_create["scatter_plots"], "Scatter_Dur_vs_I_Io.png"), dpi = 600)
        
        plt.show()
        plt.close()
        
    def histEventDur(self, xmin = None, xmax = None, bins = 75):
        # Plot a histogram of the normalized data
        fig, ax = plt.subplots(figsize = (9,8))
        
        plt.hist([math.log10(values / 1000) for values in self.event_duration], bins = bins, color = self.scatter_variables["color"][0], histtype = 'stepfilled') # , log = True)
        
        ax.set_xlabel("log(Event Duration (s))", size = 30, fontname = "Arial")
        ax.set_ylabel("Counts", size = 30, fontname = "Arial")
        ax.set_xlim(xmin, xmax)
        
        plt.xticks(fontsize = 30, fontname = 'Arial')
        plt.yticks(fontsize = 30, fontname = 'Arial')
        
        # Sets parametesr for plot formatting
        ax.spines['top'].set_visible(False) # Removes top and right lines of plot
        ax.spines['right'].set_visible(False)
        
        ax.spines['left'].set_linewidth(4) # Makes the boarder bold
        ax.xaxis.set_tick_params(width = 4, length = 5)
        ax.spines['bottom'].set_linewidth(4) # Makes the boarder bold
        ax.yaxis.set_tick_params(width = 4, length = 5)
        
        fig.tight_layout()
        
        # Making folder and saving plot
        try:
            os.mkdir(os.path.join(self.file_path, self.folders_to_create["scatter_plots"]))
        except:
            pass
        
        plt.savefig(os.path.join(self.file_path, self.folders_to_create["scatter_plots"], "Hist_Log_Dur.png"), dpi = 600)
        
        plt.show()
        plt.close()
    
#%%

initialize_data = PlottingNanoporeData(file_path = path, data_file = file_name, applied_voltage = appl_volt)
extracted_data = initialize_data.extractValues()
plotting_data = initialize_data.plotDurVsMag(ymin = 0.0001, ymax = 1, xmin = 0, xmax = 1200)
plotting_data2 = initialize_data.plotDurVsI_Io(xmin = 0.9, xmax = 1, ymin = 0.0001, ymax = 1)
histogram_plot = initialize_data.histEventDur(xmin = -5, xmax = 0, bins = 30) # 